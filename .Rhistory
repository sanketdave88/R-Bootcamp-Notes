library(xlxs)
library(xlsx)
readxl_example()
readxl("datasets.xlsx")
readxl_example()
library(xlsx)
library(xlsx)
library(xlsx)
install.packages("xlsx")
library(xlsx)
x <- 4L
class(x)
x <- c(4, TRUE)
case.names(x)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[1]]
x<- 1:4
y<- 2:#
y<- 2:3
y<- 2:3
x
y
x+y
class(x+y)
x <- c(17, 14, 4, 5, 13, 12, 10)
x>10
x>10 <- 4
(x>10) <- 4
x[x>10]
x[x>10] <-4
x
read.csv(hw1_data)
read.csv("hw1_data.csv")
df <- read.csv("hw1_data.csv")
columns(df)
head(df)
nrows(df)
nrow(df)
df[47,'Ozone']
is.na(df$Ozone)
any(is.na(df$Ozone))
count.fields(is.na(df$Ozone))
summary(is.na(df$Ozone))
mean(df$Ozone)
mean(dropna(df$Ozone))
mean(drop.na(df$Ozone))
mean(na.omit(df$Ozone))
sub.df <- subset(df,(Ozone >31 & Temp >90))
sub.df
mean(sub.df$Solar.R)
df[df$Month == 6,mean("Temp")]
df[df$Month == 6,mean(na.omit("Temp"))]
subset(df,Month == 6)
df1 <- ubset(df,Month == 6)
df1 <- subset(df,Month == 6)
df1
mean(df1$Temp)
df1 <- subset(df,Month == 5)
max(df1$Ozone)
max(na.omit(df1$Ozone))
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
install_from_swirl("R Programming")
install_from_swirl("R Programming")
swirl()
swirl()
5+7
x <- 5+7
x
y = x-3
y <- x - 3
y
z <- c(1.1, 9, 3.14)
c?
c???
c.??
help(c)
swirl()
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files())
?args
args(list.files
)
old.dir <- getwd()
dir.create(testdir)
dir.create(old.dir,testdir)
?dir.create
dir.create(old.dir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
dir()
file.exists("testdir")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R",folder1,folder2)
file.path("mytest3.R","folder1","folder2")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path(testdir2))
old.dir
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq = seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect = c(0,5,55,-10,6)
num_vect <- c(0,5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name = c(my_char,"Sanket")
my_name
paste(my_name)
paste(my_name,collapse = " ")
paste("Hello","World!",sep = " ")
paste("Hello","world!",sep = " ")
paste("X","Y","Z",sep="")
paste(c("X","Y","Z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
bye()
hi
"Hello world"
swirl()
bye()
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files
)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest1.R")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3
.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
setwd(old.dir)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
rankall <- function(outcome, num = "best") {
## Read outcome data
d <- read.csv("C:/Users/Sanket Dave/Desktop/Data Science/R/R-Bootcamp-Notes/Data/hopital-quality-data/outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
validState = sort(unique(data[,7]))
if( (outcome %in% c("heart attack","heart failure","pneumonia") ) != TRUE ){
stop('invalid outcome')
}
##getting original column name
if (outcome == "heart attack"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else if(outcome == "pneumonia"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## For each state, find the hospital of the given rank
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
rankall <- function(outcome, num = "best") {
## Read outcome data
d <- read.csv("C:/Users/Sanket Dave/Desktop/Data Science/R/R-Bootcamp-Notes/Data/hopital-quality-data/outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
validState = sort(unique(data[,7]))
if( (outcome %in% c("heart attack","heart failure","pneumonia") ) != TRUE ){
stop('invalid outcome')
}
##getting original column name
if (outcome == "heart attack"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else if(outcome == "pneumonia"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## For each state, find the hospital of the given rank
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- d[d$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
r <- rankall("heart attack", 4)
rankall <- function(outcome, num = "best") {
## Read outcome data
d <- read.csv("C:/Users/Sanket Dave/Desktop/Data Science/R/R-Bootcamp-Notes/Data/hopital-quality-data/outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
validState = sort(unique(data[,7]))
if( (outcome %in% c("heart attack","heart failure","pneumonia") ) != TRUE ){
stop('invalid outcome')
}
##getting original column name
if (outcome == "heart attack"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else if(outcome == "pneumonia"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## For each state, find the hospital of the given rank
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- d[d$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
r <- rankall("heart attack", 4)
rankall <- function(outcome, num = "best") {
## Read outcome data
d <- read.csv("C:/Users/Sanket Dave/Desktop/Data Science/R/R-Bootcamp-Notes/Data/hopital-quality-data/outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
validState = sort(unique(d[,7]))
if( (outcome %in% c("heart attack","heart failure","pneumonia") ) != TRUE ){
stop('invalid outcome')
}
##getting original column name
if (outcome == "heart attack"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else if(outcome == "pneumonia"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## For each state, find the hospital of the given rank
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- d[d$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
r <- rankall("heart attack", 4)
rankall <- function(outcome, num = "best") {
## Read outcome data
d <- read.csv("C:/Users/Sanket Dave/Desktop/Data Science/R/R-Bootcamp-Notes/Data/hopital-quality-data/outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
validState = sort(unique(d[,7]))
if( (outcome %in% c("heart attack","heart failure","pneumonia") ) != TRUE ){
stop('invalid outcome')
}
##getting original column name
if (outcome == "heart attack"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else if(outcome == "pneumonia"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## For each state, find the hospital of the given rank
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- d[d$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[outcome]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
r <- rankall("heart attack", 4)
rankall <- function(outcome, num = "best") {
## Read outcome data
d <- read.csv("C:/Users/Sanket Dave/Desktop/Data Science/R/R-Bootcamp-Notes/Data/hopital-quality-data/outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
validState = sort(unique(d[,7]))
if( (outcome %in% c("heart attack","heart failure","pneumonia") ) != TRUE ){
stop('invalid outcome')
}
##getting original column name
if (outcome == "heart attack"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else if(outcome == "pneumonia"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## For each state, find the hospital of the given rank
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- d[d$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[outcome]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(state=validState,row.names=validState)
}
r <- rankall("heart attack", 4)
hospital <- character(0)
rankall <- function(outcome, num = "best") {
## Read outcome data
d <- read.csv("C:/Users/Sanket Dave/Desktop/Data Science/R/R-Bootcamp-Notes/Data/hopital-quality-data/outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
validState = sort(unique(d[,7]))
if( (outcome %in% c("heart attack","heart failure","pneumonia") ) != TRUE ){
stop('invalid outcome')
}
##getting original column name
if (outcome == "heart attack"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else if(outcome == "pneumonia"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
hospital <- character(0)
## For each state, find the hospital of the given rank
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- d[d$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[outcome]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(state=validState,row.names=validState)
}
r <- rankall("heart attack", 4)
r <- rankall("heart attack", 4)
rankall <- function(outcome, num = "best") {
## Read outcome data
d <- read.csv("C:/Users/Sanket Dave/Desktop/Data Science/R/R-Bootcamp-Notes/Data/hopital-quality-data/outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
validState = sort(unique(d[,7]))
if( (outcome %in% c("heart attack","heart failure","pneumonia") ) != TRUE ){
stop('invalid outcome')
}
##getting original column name
if (outcome == "heart attack"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else if(outcome == "pneumonia"){
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
hospital <- character(0)
## For each state, find the hospital of the given rank
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- d[d$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[outcome]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
data.state[[outcome]]
View(d)
d <- read.csv("C:/Users/Sanket Dave/Desktop/Data Science/R/R-Bootcamp-Notes/Data/hopital-quality-data/outcome-of-care-measures.csv", colClasses = "character")
View(d)
validState = sort(unique(d[,7]))
data.state <- d[d$State==validState,]
data.state <- d[d$State=="TX",]
data.state[[outcome]]
data.state[["heart attack"]]
data.state[["heart failure"]]
as.numeric(data.state[["heart attack"]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA)
as.numeric(data.state[["heart attack"]]))
as.numeric(data.state[["heart attack"]])
as.numeric(data.state[["heart attack"]],data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA)
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","./Data")
list.files()
setwd("./Data")
